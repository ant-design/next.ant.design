"use strict";(self.webpackChunkantd=self.webpackChunkantd||[]).push([[37560],{37560:function(W,d,i){i.r(d);var T=i(88439),u=i.n(T),B=i(17934),_=i.n(B),g=i(21071),E=i.n(g),I=i(36681),f=i.n(I),c=i(71062),P=i(12629),p=i(58541),A=i.n(p),L=i(74361),D=i(70915),C=i(86524),y=i(7931),M=i(13103),$=["index","moveRow","className","style"],R="DraggableBodyRow",S=function(n){var e=n.index,a=n.moveRow,r=n.className,o=n.style,s=f()(n,$),h=(0,c.useRef)(null),l=(0,L.L)({accept:R,collect:function(v){var H=v.getItem()||{},b=H.index;return b===e?{}:{isOver:v.isOver(),dropClassName:b<e?" drop-over-downward":" drop-over-upward"}},drop:function(v){a(v.index,e)}}),m=E()(l,2),O=m[0],N=O.isOver,J=O.dropClassName,Y=m[1],Z=(0,D.c)({type:R,item:{index:e},collect:function(v){return{isDragging:v.isDragging()}}}),G=E()(Z,2),z=G[1];return Y(z(h)),(0,M.tZ)("tr",u()({ref:h,className:"".concat(r).concat(N?J:""),style:_()({cursor:"move"},o)},s))},w=[{title:"Name",dataIndex:"name",key:"name"},{title:"Age",dataIndex:"age",key:"age"},{title:"Address",dataIndex:"address",key:"address"}],U=function(){var n=(0,c.useState)([{key:"1",name:"John Brown",age:32,address:"New York No. 1 Lake Park"},{key:"2",name:"Jim Green",age:42,address:"London No. 1 Lake Park"},{key:"3",name:"Joe Black",age:32,address:"Sidney No. 1 Lake Park"}]),e=E()(n,2),a=e[0],r=e[1],o={body:{row:S}},s=(0,c.useCallback)(function(h,l){var m=a[h];r(A()(a,{$splice:[[h,1],[l,0,m]]}))},[a]);return(0,M.tZ)(C.W,{backend:y.PD},(0,M.tZ)(P.Table,{columns:w,dataSource:a,components:o,onRow:function(l,m){var O={index:m,moveRow:s};return O}}))};d.default=U},58541:function(W,d,i){var T=i(97671);Object.defineProperty(d,"__esModule",{value:!0});function u(t){return typeof t=="object"&&!("toString"in t)?Object.prototype.toString.call(t).slice(8,-1):t}var B=typeof T=="object"&&!0;function _(t,n){if(!t)throw B?new Error("Invariant failed"):new Error(n())}d.invariant=_;var g=Object.prototype.hasOwnProperty,E=Array.prototype.splice,I=Object.prototype.toString;function f(t){return I.call(t).slice(8,-1)}var c=Object.assign||function(t,n){return P(n).forEach(function(e){g.call(n,e)&&(t[e]=n[e])}),t},P=typeof Object.getOwnPropertySymbols=="function"?function(t){return Object.keys(t).concat(Object.getOwnPropertySymbols(t))}:function(t){return Object.keys(t)};function p(t){return Array.isArray(t)?c(t.constructor(t.length),t):f(t)==="Map"?new Map(t):f(t)==="Set"?new Set(t):t&&typeof t=="object"?c(Object.create(Object.getPrototypeOf(t)),t):t}var A=function(){function t(){this.commands=c({},L),this.update=this.update.bind(this),this.update.extend=this.extend=this.extend.bind(this),this.update.isEquals=function(n,e){return n===e},this.update.newContext=function(){return new t().update}}return Object.defineProperty(t.prototype,"isEquals",{get:function(){return this.update.isEquals},set:function(n){this.update.isEquals=n},enumerable:!0,configurable:!0}),t.prototype.extend=function(n,e){this.commands[n]=e},t.prototype.update=function(n,e){var a=this,r=typeof e=="function"?{$apply:e}:e;Array.isArray(n)&&Array.isArray(r)||_(!Array.isArray(r),function(){return"update(): You provided an invalid spec to update(). The spec may not contain an array except as the value of $set, $push, $unshift, $splice or any custom command allowing an array value."}),_(typeof r=="object"&&r!==null,function(){return"update(): You provided an invalid spec to update(). The spec and every included key path must be plain objects containing one of the "+("following commands: "+Object.keys(a.commands).join(", ")+".")});var o=n;return P(r).forEach(function(s){if(g.call(a.commands,s)){var h=n===o;o=a.commands[s](r[s],o,r,n),h&&a.isEquals(o,n)&&(o=n)}else{var l=f(n)==="Map"?a.update(n.get(s),r[s]):a.update(n[s],r[s]),m=f(o)==="Map"?o.get(s):o[s];(!a.isEquals(l,m)||typeof l=="undefined"&&!g.call(n,s))&&(o===n&&(o=p(n)),f(o)==="Map"?o.set(s,l):o[s]=l)}}),o},t}();d.Context=A;var L={$push:function(t,n,e){return C(n,e,"$push"),t.length?n.concat(t):n},$unshift:function(t,n,e){return C(n,e,"$unshift"),t.length?t.concat(n):n},$splice:function(t,n,e,a){return M(n,e),t.forEach(function(r){$(r),n===a&&r.length&&(n=p(a)),E.apply(n,r)}),n},$set:function(t,n,e){return S(e),t},$toggle:function(t,n){y(t,"$toggle");var e=t.length?p(n):n;return t.forEach(function(a){e[a]=!n[a]}),e},$unset:function(t,n,e,a){return y(t,"$unset"),t.forEach(function(r){Object.hasOwnProperty.call(n,r)&&(n===a&&(n=p(a)),delete n[r])}),n},$add:function(t,n,e,a){return U(n,"$add"),y(t,"$add"),f(n)==="Map"?t.forEach(function(r){var o=r[0],s=r[1];n===a&&n.get(o)!==s&&(n=p(a)),n.set(o,s)}):t.forEach(function(r){n===a&&!n.has(r)&&(n=p(a)),n.add(r)}),n},$remove:function(t,n,e,a){return U(n,"$remove"),y(t,"$remove"),t.forEach(function(r){n===a&&n.has(r)&&(n=p(a)),n.delete(r)}),n},$merge:function(t,n,e,a){return w(n,t),P(t).forEach(function(r){t[r]!==n[r]&&(n===a&&(n=p(a)),n[r]=t[r])}),n},$apply:function(t,n){return R(t),t(n)}},D=new A;d.isEquals=D.update.isEquals,d.extend=D.extend,d.default=D.update,d.default.default=W.exports=c(d.default,d);function C(t,n,e){_(Array.isArray(t),function(){return"update(): expected target of "+u(e)+" to be an array; got "+u(t)+"."}),y(n[e],e)}function y(t,n){_(Array.isArray(t),function(){return"update(): expected spec of "+u(n)+" to be an array; got "+u(t)+". Did you forget to wrap your parameter in an array?"})}function M(t,n){_(Array.isArray(t),function(){return"Expected $splice target to be an array; got "+u(t)}),$(n.$splice)}function $(t){_(Array.isArray(t),function(){return"update(): expected spec of $splice to be an array of arrays; got "+u(t)+". Did you forget to wrap your parameters in an array?"})}function R(t){_(typeof t=="function",function(){return"update(): expected spec of $apply to be a function; got "+u(t)+"."})}function S(t){_(Object.keys(t).length===1,function(){return"Cannot have more than one key in an object with $set"})}function w(t,n){_(n&&typeof n=="object",function(){return"update(): $merge expects a spec of type 'object'; got "+u(n)}),_(t&&typeof t=="object",function(){return"update(): $merge expects a target of type 'object'; got "+u(t)})}function U(t,n){var e=f(t);_(e==="Map"||e==="Set",function(){return"update(): "+u(n)+" expects a target of type Set or Map; got "+u(e)})}}}]);
