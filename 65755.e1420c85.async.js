"use strict";(self.webpackChunkantd=self.webpackChunkantd||[]).push([[65755],{65755:function(w,d,s){s.r(d);var O=s(67333),_=s.n(O),T=s(97857),u=s.n(T),h=s(5574),g=s.n(h),B=s(13769),l=s.n(B),c=s(67294),P=s(13669),p=s(7145),A=s.n(p),I=s(98169),D=s(98958),C=s(63679),v=s(36963),M=s(66366),$=["index","moveRow","className","style"],R="DraggableBodyRow",L=function(e){var t=e.index,a=e.moveRow,r=e.className,o=e.style,i=l()(e,$),m=(0,c.useRef)(null),f=(0,I.L)({accept:R,collect:function(E){var G=E.getItem()||{},N=G.index;return N===t?{}:{isOver:E.isOver(),dropClassName:N<t?" drop-over-downward":" drop-over-upward"}},drop:function(E){a(E.index,t)}}),y=g()(f,2),U=y[0],x=U.isOver,b=U.dropClassName,J=y[1],Y=(0,D.c)({type:R,item:{index:t},collect:function(E){return{isDragging:E.isDragging()}}}),Z=g()(Y,2),k=Z[1];return J(k(m)),(0,M.tZ)("tr",_()({ref:m,className:"".concat(r).concat(x?b:""),style:u()({cursor:"move"},o)},i))},S=[{title:"Name",dataIndex:"name",key:"name"},{title:"Age",dataIndex:"age",key:"age"},{title:"Address",dataIndex:"address",key:"address"}],W=function(){var e=(0,c.useState)([{key:"1",name:"John Brown",age:32,address:"New York No. 1 Lake Park"},{key:"2",name:"Jim Green",age:42,address:"London No. 1 Lake Park"},{key:"3",name:"Joe Black",age:32,address:"Sidney No. 1 Lake Park"}]),t=g()(e,2),a=t[0],r=t[1],o={body:{row:L}},i=(0,c.useCallback)(function(m,f){var y=a[m];r(A()(a,{$splice:[[m,1],[f,0,y]]}))},[a]);return(0,M.tZ)(C.W,{backend:v.PD},(0,M.tZ)(P.Table,{columns:S,dataSource:a,components:o,onRow:function(f,y){var U={index:y,moveRow:i};return U}}))};d.default=W},7145:function(w,d,s){var O=s(34155);Object.defineProperty(d,"__esModule",{value:!0});function _(n){return typeof n=="object"&&!("toString"in n)?Object.prototype.toString.call(n).slice(8,-1):n}var T=typeof O=="object"&&!0;function u(n,e){if(!n)throw T?new Error("Invariant failed"):new Error(e())}d.invariant=u;var h=Object.prototype.hasOwnProperty,g=Array.prototype.splice,B=Object.prototype.toString;function l(n){return B.call(n).slice(8,-1)}var c=Object.assign||function(n,e){return P(e).forEach(function(t){h.call(e,t)&&(n[t]=e[t])}),n},P=typeof Object.getOwnPropertySymbols=="function"?function(n){return Object.keys(n).concat(Object.getOwnPropertySymbols(n))}:function(n){return Object.keys(n)};function p(n){return Array.isArray(n)?c(n.constructor(n.length),n):l(n)==="Map"?new Map(n):l(n)==="Set"?new Set(n):n&&typeof n=="object"?c(Object.create(Object.getPrototypeOf(n)),n):n}var A=function(){function n(){this.commands=c({},I),this.update=this.update.bind(this),this.update.extend=this.extend=this.extend.bind(this),this.update.isEquals=function(e,t){return e===t},this.update.newContext=function(){return new n().update}}return Object.defineProperty(n.prototype,"isEquals",{get:function(){return this.update.isEquals},set:function(e){this.update.isEquals=e},enumerable:!0,configurable:!0}),n.prototype.extend=function(e,t){this.commands[e]=t},n.prototype.update=function(e,t){var a=this,r=typeof t=="function"?{$apply:t}:t;Array.isArray(e)&&Array.isArray(r)||u(!Array.isArray(r),function(){return"update(): You provided an invalid spec to update(). The spec may not contain an array except as the value of $set, $push, $unshift, $splice or any custom command allowing an array value."}),u(typeof r=="object"&&r!==null,function(){return"update(): You provided an invalid spec to update(). The spec and every included key path must be plain objects containing one of the "+("following commands: "+Object.keys(a.commands).join(", ")+".")});var o=e;return P(r).forEach(function(i){if(h.call(a.commands,i)){var m=e===o;o=a.commands[i](r[i],o,r,e),m&&a.isEquals(o,e)&&(o=e)}else{var f=l(e)==="Map"?a.update(e.get(i),r[i]):a.update(e[i],r[i]),y=l(o)==="Map"?o.get(i):o[i];(!a.isEquals(f,y)||typeof f=="undefined"&&!h.call(e,i))&&(o===e&&(o=p(e)),l(o)==="Map"?o.set(i,f):o[i]=f)}}),o},n}();d.Context=A;var I={$push:function(n,e,t){return C(e,t,"$push"),n.length?e.concat(n):e},$unshift:function(n,e,t){return C(e,t,"$unshift"),n.length?n.concat(e):e},$splice:function(n,e,t,a){return M(e,t),n.forEach(function(r){$(r),e===a&&r.length&&(e=p(a)),g.apply(e,r)}),e},$set:function(n,e,t){return L(t),n},$toggle:function(n,e){v(n,"$toggle");var t=n.length?p(e):e;return n.forEach(function(a){t[a]=!e[a]}),t},$unset:function(n,e,t,a){return v(n,"$unset"),n.forEach(function(r){Object.hasOwnProperty.call(e,r)&&(e===a&&(e=p(a)),delete e[r])}),e},$add:function(n,e,t,a){return W(e,"$add"),v(n,"$add"),l(e)==="Map"?n.forEach(function(r){var o=r[0],i=r[1];e===a&&e.get(o)!==i&&(e=p(a)),e.set(o,i)}):n.forEach(function(r){e===a&&!e.has(r)&&(e=p(a)),e.add(r)}),e},$remove:function(n,e,t,a){return W(e,"$remove"),v(n,"$remove"),n.forEach(function(r){e===a&&e.has(r)&&(e=p(a)),e.delete(r)}),e},$merge:function(n,e,t,a){return S(e,n),P(n).forEach(function(r){n[r]!==e[r]&&(e===a&&(e=p(a)),e[r]=n[r])}),e},$apply:function(n,e){return R(n),n(e)}},D=new A;d.isEquals=D.update.isEquals,d.extend=D.extend,d.default=D.update,d.default.default=w.exports=c(d.default,d);function C(n,e,t){u(Array.isArray(n),function(){return"update(): expected target of "+_(t)+" to be an array; got "+_(n)+"."}),v(e[t],t)}function v(n,e){u(Array.isArray(n),function(){return"update(): expected spec of "+_(e)+" to be an array; got "+_(n)+". Did you forget to wrap your parameter in an array?"})}function M(n,e){u(Array.isArray(n),function(){return"Expected $splice target to be an array; got "+_(n)}),$(e.$splice)}function $(n){u(Array.isArray(n),function(){return"update(): expected spec of $splice to be an array of arrays; got "+_(n)+". Did you forget to wrap your parameters in an array?"})}function R(n){u(typeof n=="function",function(){return"update(): expected spec of $apply to be a function; got "+_(n)+"."})}function L(n){u(Object.keys(n).length===1,function(){return"Cannot have more than one key in an object with $set"})}function S(n,e){u(e&&typeof e=="object",function(){return"update(): $merge expects a spec of type 'object'; got "+_(e)}),u(n&&typeof n=="object",function(){return"update(): $merge expects a target of type 'object'; got "+_(n)})}function W(n,e){var t=l(n);u(t==="Map"||t==="Set",function(){return"update(): "+_(e)+" expects a target of type Set or Map; got "+_(t)})}}}]);
