"use strict";(self.webpackChunkantd=self.webpackChunkantd||[]).push([[65755],{65755:function(U,d,i){i.r(d);var T=i(67333),u=i.n(T),B=i(97857),_=i.n(B),g=i(5574),E=i.n(g),I=i(13769),l=i.n(I),c=i(67294),P=i(13669),p=i(7145),A=i.n(p),L=i(98169),D=i(98958),C=i(63679),h=i(36963),M=i(13946),$=["index","moveRow","className","style"],w="DraggableBodyRow",S=function(n){var t=n.index,r=n.moveRow,a=n.className,o=n.style,s=l()(n,$),m=(0,c.useRef)(null),f=(0,L.L)({accept:w,collect:function(v){var z=v.getItem()||{},N=z.index;return N===t?{}:{isOver:v.isOver(),dropClassName:N<t?" drop-over-downward":" drop-over-upward"}},drop:function(v){r(v.index,t)}}),y=E()(f,2),O=y[0],b=O.isOver,J=O.dropClassName,Y=y[1],Z=(0,D.c)({type:w,item:{index:t},collect:function(v){return{isDragging:v.isDragging()}}}),k=E()(Z,2),G=k[1];return Y(G(m)),(0,M.tZ)("tr",u()({ref:m,className:"".concat(a).concat(b?J:""),style:_()({cursor:"move"},o)},s))},W=[{title:"Name",dataIndex:"name",key:"name"},{title:"Age",dataIndex:"age",key:"age"},{title:"Address",dataIndex:"address",key:"address"}],R=function(){var n=(0,c.useState)([{key:"1",name:"John Brown",age:32,address:"New York No. 1 Lake Park"},{key:"2",name:"Jim Green",age:42,address:"London No. 1 Lake Park"},{key:"3",name:"Joe Black",age:32,address:"Sidney No. 1 Lake Park"}]),t=E()(n,2),r=t[0],a=t[1],o={body:{row:S}},s=(0,c.useCallback)(function(m,f){var y=r[m];a(A()(r,{$splice:[[m,1],[f,0,y]]}))},[r]);return(0,M.tZ)(C.W,{backend:h.PD},(0,M.tZ)(P.Table,{columns:W,dataSource:r,components:o,onRow:function(f,y){var O={index:y,moveRow:s};return O}}))};d.default=R},7145:function(U,d,i){var T=i(34155);Object.defineProperty(d,"__esModule",{value:!0});function u(e){return typeof e=="object"&&!("toString"in e)?Object.prototype.toString.call(e).slice(8,-1):e}var B=typeof T=="object"&&!0;function _(e,n){if(!e)throw B?new Error("Invariant failed"):new Error(n())}d.invariant=_;var g=Object.prototype.hasOwnProperty,E=Array.prototype.splice,I=Object.prototype.toString;function l(e){return I.call(e).slice(8,-1)}var c=Object.assign||function(e,n){return P(n).forEach(function(t){g.call(n,t)&&(e[t]=n[t])}),e},P=typeof Object.getOwnPropertySymbols=="function"?function(e){return Object.keys(e).concat(Object.getOwnPropertySymbols(e))}:function(e){return Object.keys(e)};function p(e){return Array.isArray(e)?c(e.constructor(e.length),e):l(e)==="Map"?new Map(e):l(e)==="Set"?new Set(e):e&&typeof e=="object"?c(Object.create(Object.getPrototypeOf(e)),e):e}var A=function(){function e(){this.commands=c({},L),this.update=this.update.bind(this),this.update.extend=this.extend=this.extend.bind(this),this.update.isEquals=function(n,t){return n===t},this.update.newContext=function(){return new e().update}}return Object.defineProperty(e.prototype,"isEquals",{get:function(){return this.update.isEquals},set:function(n){this.update.isEquals=n},enumerable:!0,configurable:!0}),e.prototype.extend=function(n,t){this.commands[n]=t},e.prototype.update=function(n,t){var r=this,a=typeof t=="function"?{$apply:t}:t;Array.isArray(n)&&Array.isArray(a)||_(!Array.isArray(a),function(){return"update(): You provided an invalid spec to update(). The spec may not contain an array except as the value of $set, $push, $unshift, $splice or any custom command allowing an array value."}),_(typeof a=="object"&&a!==null,function(){return"update(): You provided an invalid spec to update(). The spec and every included key path must be plain objects containing one of the "+("following commands: "+Object.keys(r.commands).join(", ")+".")});var o=n;return P(a).forEach(function(s){if(g.call(r.commands,s)){var m=n===o;o=r.commands[s](a[s],o,a,n),m&&r.isEquals(o,n)&&(o=n)}else{var f=l(n)==="Map"?r.update(n.get(s),a[s]):r.update(n[s],a[s]),y=l(o)==="Map"?o.get(s):o[s];(!r.isEquals(f,y)||typeof f=="undefined"&&!g.call(n,s))&&(o===n&&(o=p(n)),l(o)==="Map"?o.set(s,f):o[s]=f)}}),o},e}();d.Context=A;var L={$push:function(e,n,t){return C(n,t,"$push"),e.length?n.concat(e):n},$unshift:function(e,n,t){return C(n,t,"$unshift"),e.length?e.concat(n):n},$splice:function(e,n,t,r){return M(n,t),e.forEach(function(a){$(a),n===r&&a.length&&(n=p(r)),E.apply(n,a)}),n},$set:function(e,n,t){return S(t),e},$toggle:function(e,n){h(e,"$toggle");var t=e.length?p(n):n;return e.forEach(function(r){t[r]=!n[r]}),t},$unset:function(e,n,t,r){return h(e,"$unset"),e.forEach(function(a){Object.hasOwnProperty.call(n,a)&&(n===r&&(n=p(r)),delete n[a])}),n},$add:function(e,n,t,r){return R(n,"$add"),h(e,"$add"),l(n)==="Map"?e.forEach(function(a){var o=a[0],s=a[1];n===r&&n.get(o)!==s&&(n=p(r)),n.set(o,s)}):e.forEach(function(a){n===r&&!n.has(a)&&(n=p(r)),n.add(a)}),n},$remove:function(e,n,t,r){return R(n,"$remove"),h(e,"$remove"),e.forEach(function(a){n===r&&n.has(a)&&(n=p(r)),n.delete(a)}),n},$merge:function(e,n,t,r){return W(n,e),P(e).forEach(function(a){e[a]!==n[a]&&(n===r&&(n=p(r)),n[a]=e[a])}),n},$apply:function(e,n){return w(e),e(n)}},D=new A;d.isEquals=D.update.isEquals,d.extend=D.extend,d.default=D.update,d.default.default=U.exports=c(d.default,d);function C(e,n,t){_(Array.isArray(e),function(){return"update(): expected target of "+u(t)+" to be an array; got "+u(e)+"."}),h(n[t],t)}function h(e,n){_(Array.isArray(e),function(){return"update(): expected spec of "+u(n)+" to be an array; got "+u(e)+". Did you forget to wrap your parameter in an array?"})}function M(e,n){_(Array.isArray(e),function(){return"Expected $splice target to be an array; got "+u(e)}),$(n.$splice)}function $(e){_(Array.isArray(e),function(){return"update(): expected spec of $splice to be an array of arrays; got "+u(e)+". Did you forget to wrap your parameters in an array?"})}function w(e){_(typeof e=="function",function(){return"update(): expected spec of $apply to be a function; got "+u(e)+"."})}function S(e){_(Object.keys(e).length===1,function(){return"Cannot have more than one key in an object with $set"})}function W(e,n){_(n&&typeof n=="object",function(){return"update(): $merge expects a spec of type 'object'; got "+u(n)}),_(e&&typeof e=="object",function(){return"update(): $merge expects a target of type 'object'; got "+u(e)})}function R(e,n){var t=l(e);_(t==="Map"||t==="Set",function(){return"update(): "+u(n)+" expects a target of type Set or Map; got "+u(t)})}}}]);
